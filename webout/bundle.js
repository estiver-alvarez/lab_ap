!function(t){var e={};function n(o){if(e[o])return e[o].exports;var s=e[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(o,s,function(e){return t[e]}.bind(null,s));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(1);function s(t,e){if(!t)return;const n=t.split("/");return{state:parseInt(n[0])||e,stack:n[1].split("").reverse()}}function r(t){for(const e of t)if(e.length!==t[0].length)throw new Error("Dimension error");const e=new Set,n=t[0][0],o=t[0];for(let r=1;r<t.length;r++){const i=t[r],c=i[0]||void 0;for(let t=1;t<i.length;t++){const r=i[t],a=o[t],f=s(r,n);void 0!==f&&e.add({state:n,input:c,stack:a,next:f})}}return e}e.constructPDA=function(t){const e=new Set,n=new Set,s=t.split(/\s*\n{2,}\s*/).map(t=>t.trim().split(/\s*\n\s*/).map(t=>t.split(/\s*,\s*/).map(t=>t||void 0)));for(const t of s){let o=t[0][0],s=!1;"*"===o[0]&&(s=!0,o=o.slice(1)),t[0][0]=parseInt(o),s&&n.add(t[0][0]),r(t).forEach(t=>e.add(t))}const i=s[0][0][0];return console.log(s),new o.PDA(i,n,e,"Z")},e.fuzzTest=async function(t,e){let n=Date.now();const o=t.getAlphabet();console.log(o);const s=function*(t,e){const n=[];yield n,n.push(t[0]);const o=new Map;for(let e=0;e<t.length;e++)o.set(t[e],t[(e+1)%t.length]);const s=t=>o.get(t);for(let o=0;o<e;o++){for(;;){yield n;let e=0;for(;e<n.length&&(n[e]=s(n[e]),n[e]===t[0]);)e+=1;if(e===n.length)break}n.push(t[0])}}(o,e);for(;Date.now()-n<2e3;){const e=s.next();if(e.done)return;const n=e.value;t.reset(0,["Z"]),t.accepts(n)&&console.log(n.join(""))}console.log("timeout")},console.log("Hmmm")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class o{constructor(t){const e=new Map,n=new Map;for(const o of t)void 0===o.input?n.set(o.stack,{consume:!1,...o.next}):(void 0===e.get(o.stack)&&e.set(o.stack,new Map),e.get(o.stack).set(o.input,{consume:!0,...o.next}));this.next=e;for(const[t,e]of n){if(void 0!==this.next.get(t))throw new Error("Non-deterministic");this.next.set(t,e)}}getNext(t,e){const n=this.next.get(e);return n instanceof Map?void 0!==t?n.get(t):void 0:n}}e.PDA=class{constructor(t,e,n,s){this.state=t,this.finalStates=e,this.transitions=new Map,this.stack=[s];const r=new Set([t,...e]);for(const t of n)r.add(t.state),r.add(t.next.state);const i=new Map;for(const t of r)i.set(t,[]);for(const t of n)i.get(t.state).push(t);for(const[t,e]of i)this.transitions.set(t,new o(e))}accepts(t){const e=[...t,void 0];for(let t=0;t<e.length;t++){const n=e[t];for(;;){if(0===this.stack.length)return!1;const t=this.stack.pop(),e=this.transitions.get(this.state).getNext(n,t);if(void 0===e)return void 0===n&&this.finalStates.has(this.state);if(this.state=e.state,this.stack.push(...e.stack),e.consume)break;if(void 0===n)return this.finalStates.has(this.state)}}return!1}reset(t,e){this.state=t,this.stack=e}getAlphabet(){const t=new Set;for(const[,e]of this.transitions)for(const[,n]of e.next)if(n instanceof Map)for(const[e]of n)t.add(e);return Array.from(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,